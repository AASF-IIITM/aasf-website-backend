openapi: 3.0.1
info:
  title: aasf-website-backend
  description: Backend for AASF Website
  version: 1.0.0
servers:
  - url: /api
tags:
  - name: Users
    description: Operations related to users
  - name: Events
    description: Operations related to events
  - name: Specification
    description: The swagger API specification

paths:
  /users/login:
    post:
      tags:
        - Users
      servers:
        - url: /
      description: Log a user in
      requestBody:
        description: Roll number and password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginBody'
        required: true
      responses:
        200:
          description: Return token and success message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        400:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Invalid Password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Could not login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/changepassword:
    post:
      tags:
        - Users
      servers:
        - url: /
      description: Change user's password
      security:
        - Bearer: []
      requestBody:
        description: Current Password and New Password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordBody'
        required: true
      responses:
        200:
          description: Return success message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

  /users/details:
    get:
      tags:
        - Users
      servers:
        - url: /
      description: Get details of a user
      security:
        - Bearer: []
      responses:
        200:
          description: Return details of user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailsResponse'

  /users/leaderboard:
    get:
      tags:
        - Users
      servers:
        - url: /
      description: Get leaderboard
      security:
        - Bearer: []
      responses:
        200:
          description: Return leaderboard
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardResponse'

  /events:
    get:
      tags:
        - Events
      servers:
        - url: /
      description: Get events
      responses:
        200:
          description: Return events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsResponse'

  /events/attendance:
    post:
      tags:
        - Events
      servers:
        - url: /
      description: Mark attendance for a particular event
      security:
        - Bearer: []
      requestBody:
        description: The encrypted hash related to the event
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MarkAttendanceBody'
        required: true
      responses:
        200:
          description: Return success message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

  /spec:
    get:
      servers:
        - url: /
      tags:
        - Specification
      responses:
        200:
          description: Return the API specification
          content: {}

components:
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      description: Provide a valid JWT token

  schemas:
    Error:
      type: object
      properties:
        message:
          type: string
      additionalProperties: true

    MessageResponse:
      type: object
      properties:
        message:
          type: string

    LoginBody:
      required:
        - roll
        - password
      type: object
      properties:
        roll:
          type: string
          example: 2018BCS-000
        password:
          type: string
          example: yourPassword

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: ey.......9X
        message:
          type: string
          example: Successfully Logged in!

    ChangePasswordBody:
      type: object
      required:
        - currentPassword
        - newPassword
      properties:
        currentPassword:
          type: string
          example: yourCurrentPassword
        newPassword:
          type: string
          example: yourNewPassword

    UserDetailsResponse:
      type: object
      properties:
        message:
          type: string
          example: Details fetched successfully
        user:
          type: object
          properties:
            _id:
              type: string
              description: Roll number of the student
              example: 2020BCS-000
            name:
              type: string
              description: Name of the student
            dp:
              type: string
              description: The profile picture of the student(if exists)
            role:
              type: string
            score:
              type: object
              properties:
                technical:
                  type: number
                managerial:
                  type: number
                oratory:
                  type: number
            achievements:
              type: object
              properties:
                first:
                  type: array
                  items:
                    type: string
                second:
                  type: array
                  items:
                    type: string
                third:
                  type: array
                  items:
                    type: string

    LeaderboardResponse:
      type: object
      properties:
        message:
          type: string
          example: Leaderboard succesfully fetched
        totalScore:
          type: object
          description: Highest score possible in each category
          properties:
            technical:
              type: number
            managerial:
              type: number
            oratory:
              type: number
        leaderboard:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
              name:
                type: string
              totalScore:
                type: number

    EventsResponse:
      type: object
      properties:
        message:
          type: string
        events:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              startDate:
                type: string
              numberOfDays:
                type: string
              category:
                type: string
              attendance:
                type: array
                items:
                  type: number

    MarkAttendanceBody:
      type: object
      properties:
        hash:
          type: string
          description: Encrypted hash related to the particular event
